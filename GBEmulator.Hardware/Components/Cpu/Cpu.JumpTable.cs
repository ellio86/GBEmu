using GBEmulator.Core.Enums;

namespace GBEmulator.Hardware.Components.Cpu;

public partial class Cpu
{
    private Action?[] Instructions;
    private Action?[] Instructions16bit;

    private void InitializeJumpTables()
    {
        Initialize8BitJumpTable();
        Initialize16BitJumpTable();
    }

    private void Initialize8BitJumpTable()
    {
        Instructions = new Action[256];
        Instructions[0x00] = null;
        Instructions[0x01] = () => LD(InstructionParam.BC, InstructionParam.d16);
        Instructions[0x02] = () => LD(InstructionParam.BCMem, InstructionParam.A);
        Instructions[0x03] = () => INC(InstructionParam.BC);
        Instructions[0x04] = () => INC(InstructionParam.B);
        Instructions[0x05] = () => DEC(InstructionParam.B);
        Instructions[0x06] = () => LD(InstructionParam.B, InstructionParam.d8);
        Instructions[0x07] = RLCA;
        Instructions[0x08] = () => LD(InstructionParam.a16Mem, InstructionParam.SP);
        Instructions[0x09] = () => ADD(InstructionParam.HL, InstructionParam.BC);
        Instructions[0x0A] = () => LD(InstructionParam.A, InstructionParam.BCMem);
        Instructions[0x0B] = () => DEC(InstructionParam.BC);
        Instructions[0x0C] = () => INC(InstructionParam.C);
        Instructions[0x0D] = () => DEC(InstructionParam.C);
        Instructions[0x0E] = () => LD(InstructionParam.C, InstructionParam.d8);
        Instructions[0x0F] = RRCA;
        Instructions[0x10] = () => throw new NotImplementedException();
        Instructions[0x11] = () => LD(InstructionParam.DE, InstructionParam.d16);
        Instructions[0x12] = () => LD(InstructionParam.DEMem, InstructionParam.A);
        Instructions[0x13] = () => INC(InstructionParam.DE);
        Instructions[0x14] = () => INC(InstructionParam.D);
        Instructions[0x15] = () => DEC(InstructionParam.D);
        Instructions[0x16] = () => LD(InstructionParam.D, InstructionParam.d8);
        Instructions[0x17] = RLA;
        Instructions[0x18] = () => JR(InstructionParam.s8, InstructionParam.NoParameter);
        Instructions[0x19] = () => ADD(InstructionParam.HL, InstructionParam.DE);
        Instructions[0x1A] = () => LD(InstructionParam.A, InstructionParam.DEMem);
        Instructions[0x1B] = () => DEC(InstructionParam.DE);
        Instructions[0x1C] = () => INC(InstructionParam.E);
        Instructions[0x1D] = () => DEC(InstructionParam.E);
        Instructions[0x1E] = () => LD(InstructionParam.E, InstructionParam.d8);
        Instructions[0x1F] = RRA;
        Instructions[0x20] = () => JR(InstructionParam.NZ, InstructionParam.s8);
        Instructions[0x21] = () => LD(InstructionParam.HL, InstructionParam.d16);
        Instructions[0x22] = () => LD(InstructionParam.HLIMem, InstructionParam.A);
        Instructions[0x23] = () => INC(InstructionParam.HL);
        Instructions[0x24] = () => INC(InstructionParam.H);
        Instructions[0x25] = () => DEC(InstructionParam.H);
        Instructions[0x26] = () => LD(InstructionParam.H, InstructionParam.d8);
        Instructions[0x27] = DAA;
        Instructions[0x28] = () => JR(InstructionParam.Z, InstructionParam.s8);
        Instructions[0x29] = () => ADD(InstructionParam.HL, InstructionParam.HL);
        Instructions[0x2A] = () => LD(InstructionParam.A, InstructionParam.HLIMem);
        Instructions[0x2B] = () => DEC(InstructionParam.HL);
        Instructions[0x2C] = () => INC(InstructionParam.L);
        Instructions[0x2D] = () => DEC(InstructionParam.L);
        Instructions[0x2E] = () => LD(InstructionParam.L, InstructionParam.d8);
        Instructions[0x2F] = CPL;
        Instructions[0x30] = () => JR(InstructionParam.NC, InstructionParam.s8);
        Instructions[0x31] = () => LD(InstructionParam.SP, InstructionParam.d16);
        Instructions[0x32] = () => LD(InstructionParam.HLDMem, InstructionParam.A);
        Instructions[0x33] = () => INC(InstructionParam.SP);
        Instructions[0x34] = () => INC(InstructionParam.HLMem);
        Instructions[0x35] = () => DEC(InstructionParam.HLMem);
        Instructions[0x36] = () => LD(InstructionParam.HLMem, InstructionParam.d8);
        Instructions[0x37] = SCF;
        Instructions[0x38] = () => JR(InstructionParam.C, InstructionParam.s8);
        Instructions[0x39] = () => ADD(InstructionParam.HL, InstructionParam.SP);
        Instructions[0x3A] = () => LD(InstructionParam.A, InstructionParam.HLDMem);
        Instructions[0x3B] = () => DEC(InstructionParam.SP);
        Instructions[0x3C] = () => INC(InstructionParam.A);
        Instructions[0x3D] = () => DEC(InstructionParam.A);
        Instructions[0x3E] = () => LD(InstructionParam.A, InstructionParam.d8);
        Instructions[0x3F] = CCF;
        Instructions[0x40] = () => LD(InstructionParam.B, InstructionParam.B);
        Instructions[0x41] = () => LD(InstructionParam.B, InstructionParam.C);
        Instructions[0x42] = () => LD(InstructionParam.B, InstructionParam.D);
        Instructions[0x43] = () => LD(InstructionParam.B, InstructionParam.E);
        Instructions[0x44] = () => LD(InstructionParam.B, InstructionParam.H);
        Instructions[0x45] = () => LD(InstructionParam.B, InstructionParam.L);
        Instructions[0x46] = () => LD(InstructionParam.B, InstructionParam.HLMem);
        Instructions[0x47] = () => LD(InstructionParam.B, InstructionParam.A);
        Instructions[0x48] = () => LD(InstructionParam.C, InstructionParam.B);
        Instructions[0x49] = () => LD(InstructionParam.C, InstructionParam.C);
        Instructions[0x4A] = () => LD(InstructionParam.C, InstructionParam.D);
        Instructions[0x4B] = () => LD(InstructionParam.C, InstructionParam.E);
        Instructions[0x4C] = () => LD(InstructionParam.C, InstructionParam.H);
        Instructions[0x4D] = () => LD(InstructionParam.C, InstructionParam.L);
        Instructions[0x4E] = () => LD(InstructionParam.C, InstructionParam.HLMem);
        Instructions[0x4F] = () => LD(InstructionParam.C, InstructionParam.A);
        Instructions[0x50] = () => LD(InstructionParam.D, InstructionParam.B);
        Instructions[0x51] = () => LD(InstructionParam.D, InstructionParam.C);
        Instructions[0x52] = () => LD(InstructionParam.D, InstructionParam.D);
        Instructions[0x53] = () => LD(InstructionParam.D, InstructionParam.E);
        Instructions[0x54] = () => LD(InstructionParam.D, InstructionParam.H);
        Instructions[0x55] = () => LD(InstructionParam.D, InstructionParam.L);
        Instructions[0x56] = () => LD(InstructionParam.D, InstructionParam.HLMem);
        Instructions[0x57] = () => LD(InstructionParam.D, InstructionParam.A);
        Instructions[0x58] = () => LD(InstructionParam.E, InstructionParam.B);
        Instructions[0x59] = () => LD(InstructionParam.E, InstructionParam.C);
        Instructions[0x5A] = () => LD(InstructionParam.E, InstructionParam.D);
        Instructions[0x5B] = () => LD(InstructionParam.E, InstructionParam.E);
        Instructions[0x5C] = () => LD(InstructionParam.E, InstructionParam.H);
        Instructions[0x5D] = () => LD(InstructionParam.E, InstructionParam.L);
        Instructions[0x5E] = () => LD(InstructionParam.E, InstructionParam.HLMem);
        Instructions[0x5F] = () => LD(InstructionParam.E, InstructionParam.A);
        Instructions[0x60] = () => LD(InstructionParam.H, InstructionParam.B);
        Instructions[0x61] = () => LD(InstructionParam.H, InstructionParam.C);
        Instructions[0x62] = () => LD(InstructionParam.H, InstructionParam.D);
        Instructions[0x63] = () => LD(InstructionParam.H, InstructionParam.E);
        Instructions[0x64] = () => LD(InstructionParam.H, InstructionParam.H);
        Instructions[0x65] = () => LD(InstructionParam.H, InstructionParam.L);
        Instructions[0x66] = () => LD(InstructionParam.H, InstructionParam.HLMem);
        Instructions[0x67] = () => LD(InstructionParam.H, InstructionParam.A);
        Instructions[0x68] = () => LD(InstructionParam.L, InstructionParam.B);
        Instructions[0x69] = () => LD(InstructionParam.L, InstructionParam.C);
        Instructions[0x6A] = () => LD(InstructionParam.L, InstructionParam.D);
        Instructions[0x6B] = () => LD(InstructionParam.L, InstructionParam.E);
        Instructions[0x6C] = () => LD(InstructionParam.L, InstructionParam.H);
        Instructions[0x6D] = () => LD(InstructionParam.L, InstructionParam.L);
        Instructions[0x6E] = () => LD(InstructionParam.L, InstructionParam.HLMem);
        Instructions[0x6F] = () => LD(InstructionParam.L, InstructionParam.A);
        Instructions[0x70] = () => LD(InstructionParam.HLMem, InstructionParam.B);
        Instructions[0x71] = () => LD(InstructionParam.HLMem, InstructionParam.C);
        Instructions[0x72] = () => LD(InstructionParam.HLMem, InstructionParam.D);
        Instructions[0x73] = () => LD(InstructionParam.HLMem, InstructionParam.E);
        Instructions[0x74] = () => LD(InstructionParam.HLMem, InstructionParam.H);
        Instructions[0x75] = () => LD(InstructionParam.HLMem, InstructionParam.L);
        Instructions[0x76] = HALT;
        Instructions[0x77] = () => LD(InstructionParam.HLMem, InstructionParam.A);
        Instructions[0x78] = () => LD(InstructionParam.A, InstructionParam.B);
        Instructions[0x79] = () => LD(InstructionParam.A, InstructionParam.C);
        Instructions[0x7A] = () => LD(InstructionParam.A, InstructionParam.D);
        Instructions[0x7B] = () => LD(InstructionParam.A, InstructionParam.E);
        Instructions[0x7C] = () => LD(InstructionParam.A, InstructionParam.H);
        Instructions[0x7D] = () => LD(InstructionParam.A, InstructionParam.L);
        Instructions[0x7E] = () => LD(InstructionParam.A, InstructionParam.HLMem);
        Instructions[0x7F] = () => LD(InstructionParam.A, InstructionParam.A);
        Instructions[0x80] = () => ADD(InstructionParam.A, InstructionParam.B);
        Instructions[0x81] = () => ADD(InstructionParam.A, InstructionParam.C);
        Instructions[0x82] = () => ADD(InstructionParam.A, InstructionParam.D);
        Instructions[0x83] = () => ADD(InstructionParam.A, InstructionParam.E);
        Instructions[0x84] = () => ADD(InstructionParam.A, InstructionParam.H);
        Instructions[0x85] = () => ADD(InstructionParam.A, InstructionParam.L);
        Instructions[0x86] = () => ADD(InstructionParam.A, InstructionParam.HLMem);
        Instructions[0x87] = () => ADD(InstructionParam.A, InstructionParam.A);
        Instructions[0x88] = () => ADC(InstructionParam.A, InstructionParam.B);
        Instructions[0x89] = () => ADC(InstructionParam.A, InstructionParam.C);
        Instructions[0x8A] = () => ADC(InstructionParam.A, InstructionParam.D);
        Instructions[0x8B] = () => ADC(InstructionParam.A, InstructionParam.E);
        Instructions[0x8C] = () => ADC(InstructionParam.A, InstructionParam.H);
        Instructions[0x8D] = () => ADC(InstructionParam.A, InstructionParam.L);
        Instructions[0x8E] = () => ADC(InstructionParam.A, InstructionParam.HLMem);
        Instructions[0x8F] = () => ADC(InstructionParam.A, InstructionParam.A);
        Instructions[0x90] = () => SUB(InstructionParam.B);
        Instructions[0x91] = () => SUB(InstructionParam.C);
        Instructions[0x92] = () => SUB(InstructionParam.D);
        Instructions[0x93] = () => SUB(InstructionParam.E);
        Instructions[0x94] = () => SUB(InstructionParam.H);
        Instructions[0x95] = () => SUB(InstructionParam.L);
        Instructions[0x96] = () => SUB(InstructionParam.HLMem);
        Instructions[0x97] = () => SUB(InstructionParam.A);
        Instructions[0x98] = () => SBC(InstructionParam.A, InstructionParam.B);
        Instructions[0x99] = () => SBC(InstructionParam.A, InstructionParam.C);
        Instructions[0x9A] = () => SBC(InstructionParam.A, InstructionParam.D);
        Instructions[0x9B] = () => SBC(InstructionParam.A, InstructionParam.E);
        Instructions[0x9C] = () => SBC(InstructionParam.A, InstructionParam.H);
        Instructions[0x9D] = () => SBC(InstructionParam.A, InstructionParam.L);
        Instructions[0x9E] = () => SBC(InstructionParam.A, InstructionParam.HLMem);
        Instructions[0x9F] = () => SBC(InstructionParam.A, InstructionParam.A);
        Instructions[0xA0] = () => AND(InstructionParam.B);
        Instructions[0xA1] = () => AND(InstructionParam.C);
        Instructions[0xA2] = () => AND(InstructionParam.D);
        Instructions[0xA3] = () => AND(InstructionParam.E);
        Instructions[0xA4] = () => AND(InstructionParam.H);
        Instructions[0xA5] = () => AND(InstructionParam.L);
        Instructions[0xA6] = () => AND(InstructionParam.HLMem);
        Instructions[0xA7] = () => AND(InstructionParam.A);
        Instructions[0xA8] = () => XOR(InstructionParam.B);
        Instructions[0xA9] = () => XOR(InstructionParam.C);
        Instructions[0xAA] = () => XOR(InstructionParam.D);
        Instructions[0xAB] = () => XOR(InstructionParam.E);
        Instructions[0xAC] = () => XOR(InstructionParam.H);
        Instructions[0xAD] = () => XOR(InstructionParam.L);
        Instructions[0xAE] = () => XOR(InstructionParam.HLMem);
        Instructions[0xAF] = () => XOR(InstructionParam.A);
        Instructions[0xB0] = () => OR(InstructionParam.B);
        Instructions[0xB1] = () => OR(InstructionParam.C);
        Instructions[0xB2] = () => OR(InstructionParam.D);
        Instructions[0xB3] = () => OR(InstructionParam.E);
        Instructions[0xB4] = () => OR(InstructionParam.H);
        Instructions[0xB5] = () => OR(InstructionParam.L);
        Instructions[0xB6] = () => OR(InstructionParam.HLMem);
        Instructions[0xB7] = () => OR(InstructionParam.A);
        Instructions[0xB8] = () => CP(InstructionParam.B);
        Instructions[0xB9] = () => CP(InstructionParam.C);
        Instructions[0xBA] = () => CP(InstructionParam.D);
        Instructions[0xBB] = () => CP(InstructionParam.E);
        Instructions[0xBC] = () => CP(InstructionParam.H);
        Instructions[0xBD] = () => CP(InstructionParam.L);
        Instructions[0xBE] = () => CP(InstructionParam.HLMem);
        Instructions[0xBF] = () => CP(InstructionParam.A);
        Instructions[0xC0] = () => RET(InstructionParam.NZ);
        Instructions[0xC1] = () => POP(InstructionParam.BC);
        Instructions[0xC2] = () => JP(InstructionParam.NZ, InstructionParam.a16Mem);
        Instructions[0xC3] = () => JP(InstructionParam.a16Mem, InstructionParam.NoParameter);
        Instructions[0xC4] = () => CALL(InstructionParam.NZ, InstructionParam.a16Mem);
        Instructions[0xC5] = () => PUSH(InstructionParam.BC);
        Instructions[0xC6] = () => ADD(InstructionParam.A, InstructionParam.d8);
        Instructions[0xC7] = () => RST(InstructionParam.Bit0);
        Instructions[0xC8] = () => RET(InstructionParam.Z);
        Instructions[0xC9] = () => RET(InstructionParam.NoParameter);
        Instructions[0xCA] = () => JP(InstructionParam.Z, InstructionParam.a16Mem);
        Instructions[0xCC] = () => CALL(InstructionParam.Z, InstructionParam.a16Mem);
        Instructions[0xCD] = () => CALL(InstructionParam.a16Mem, InstructionParam.NoParameter);
        Instructions[0xCE] = () => ADC(InstructionParam.A, InstructionParam.d8);
        Instructions[0xCF] = () => RST(InstructionParam.Bit1);
        Instructions[0xD0] = () => RET(InstructionParam.NC);
        Instructions[0xD1] = () => POP(InstructionParam.DE);
        Instructions[0xD2] = () => JP(InstructionParam.NC, InstructionParam.a16Mem);
        Instructions[0xD4] = () => CALL(InstructionParam.NC, InstructionParam.a16Mem);
        Instructions[0xD5] = () => PUSH(InstructionParam.DE);
        Instructions[0xD6] = () => SUB(InstructionParam.d8);
        Instructions[0xD7] = () => RST(InstructionParam.Bit2);
        Instructions[0xD8] = () => RET(InstructionParam.C);
        Instructions[0xD9] = RETI;
        Instructions[0xDA] = () => JP(InstructionParam.C, InstructionParam.a16Mem);
        Instructions[0xDC] = () => CALL(InstructionParam.C, InstructionParam.a16Mem);
        Instructions[0xDE] = () => SBC(InstructionParam.A, InstructionParam.d8);
        Instructions[0xDF] = () => RST(InstructionParam.Bit2);
        Instructions[0xE0] = () => LD(InstructionParam.a8Mem, InstructionParam.A);
        Instructions[0xE1] = () => POP(InstructionParam.HL);
        Instructions[0xE2] = () => LD(InstructionParam.CMem, InstructionParam.A);
        Instructions[0xE5] = () => PUSH(InstructionParam.HL);
        Instructions[0xE6] = () => AND(InstructionParam.d8);
        Instructions[0xE7] = () => RST(InstructionParam.Bit4);
        Instructions[0xE8] = () => ADD(InstructionParam.SP, InstructionParam.s8);
        Instructions[0xE9] = () => JP(InstructionParam.HL, InstructionParam.NoParameter);
        Instructions[0xEA] = () => LD(InstructionParam.a16Mem, InstructionParam.A);
        Instructions[0xEE] = () => XOR(InstructionParam.d8);
        Instructions[0xEF] = () => RST(InstructionParam.Bit5);
        Instructions[0xF0] = () => LD(InstructionParam.A, InstructionParam.a8Mem);
        Instructions[0xF1] = () => POP(InstructionParam.AF);
        Instructions[0xF2] = () => LD(InstructionParam.A, InstructionParam.CMem);
        Instructions[0xF3] = () => DI();
        Instructions[0xF5] = () => PUSH(InstructionParam.AF);
        Instructions[0xF6] = () => OR(InstructionParam.d8);
        Instructions[0xF7] = () => RST(InstructionParam.Bit6);
        Instructions[0xF8] = () => LD(InstructionParam.HL, InstructionParam.SPs8);
        Instructions[0xF9] = () => LD(InstructionParam.SP, InstructionParam.HL);
        Instructions[0xFA] = () => LD(InstructionParam.A, InstructionParam.a16Mem);
        Instructions[0xFB] = () => EI();
        Instructions[0xFE] = () => CP(InstructionParam.d8);
        Instructions[0xFF] = () => RST(InstructionParam.Bit7);
    }

    private void Initialize16BitJumpTable()
    {
        Instructions16bit = new Action[256];
        Instructions16bit[0x00] = () => RLC(InstructionParam.B);
        Instructions16bit[0x01] = () => RLC(InstructionParam.C);
        Instructions16bit[0x02] = () => RLC(InstructionParam.D);
        Instructions16bit[0x03] = () => RLC(InstructionParam.E);
        Instructions16bit[0x04] = () => RLC(InstructionParam.H);
        Instructions16bit[0x05] = () => RLC(InstructionParam.L);
        Instructions16bit[0x06] = () => RLC(InstructionParam.HLMem);
        Instructions16bit[0x07] = () => RLC(InstructionParam.A);
        Instructions16bit[0x08] = () => RRC(InstructionParam.B);
        Instructions16bit[0x09] = () => RRC(InstructionParam.C);
        Instructions16bit[0x0A] = () => RRC(InstructionParam.D);
        Instructions16bit[0x0B] = () => RRC(InstructionParam.E);
        Instructions16bit[0x0C] = () => RRC(InstructionParam.H);
        Instructions16bit[0x0D] = () => RRC(InstructionParam.L);
        Instructions16bit[0x0E] = () => RRC(InstructionParam.HLMem);
        Instructions16bit[0x0F] = () => RRC(InstructionParam.A);
        Instructions16bit[0x10] = () => RL(InstructionParam.B);
        Instructions16bit[0x11] = () => RL(InstructionParam.C);
        Instructions16bit[0x12] = () => RL(InstructionParam.D);
        Instructions16bit[0x13] = () => RL(InstructionParam.E);
        Instructions16bit[0x14] = () => RL(InstructionParam.H);
        Instructions16bit[0x15] = () => RL(InstructionParam.L);
        Instructions16bit[0x16] = () => RL(InstructionParam.HLMem);
        Instructions16bit[0x17] = () => RL(InstructionParam.A);
        Instructions16bit[0x18] = () => RR(InstructionParam.B);
        Instructions16bit[0x19] = () => RR(InstructionParam.C);
        Instructions16bit[0x1A] = () => RR(InstructionParam.D);
        Instructions16bit[0x1B] = () => RR(InstructionParam.E);
        Instructions16bit[0x1C] = () => RR(InstructionParam.H);
        Instructions16bit[0x1D] = () => RR(InstructionParam.L);
        Instructions16bit[0x1E] = () => RR(InstructionParam.HLMem);
        Instructions16bit[0x1F] = () => RR(InstructionParam.A);
        Instructions16bit[0x20] = () => SLA(InstructionParam.B);
        Instructions16bit[0x21] = () => SLA(InstructionParam.C);
        Instructions16bit[0x22] = () => SLA(InstructionParam.D);
        Instructions16bit[0x23] = () => SLA(InstructionParam.E);
        Instructions16bit[0x24] = () => SLA(InstructionParam.H);
        Instructions16bit[0x25] = () => SLA(InstructionParam.L);
        Instructions16bit[0x26] = () => SLA(InstructionParam.HLMem);
        Instructions16bit[0x27] = () => SLA(InstructionParam.A);
        Instructions16bit[0x28] = () => SRA(InstructionParam.B);
        Instructions16bit[0x29] = () => SRA(InstructionParam.C);
        Instructions16bit[0x2A] = () => SRA(InstructionParam.D);
        Instructions16bit[0x2B] = () => SRA(InstructionParam.E);
        Instructions16bit[0x2C] = () => SRA(InstructionParam.H);
        Instructions16bit[0x2D] = () => SRA(InstructionParam.L);
        Instructions16bit[0x2E] = () => SRA(InstructionParam.HLMem);
        Instructions16bit[0x2F] = () => SRA(InstructionParam.A);
        Instructions16bit[0x30] = () => SWAP(InstructionParam.B);
        Instructions16bit[0x31] = () => SWAP(InstructionParam.C);
        Instructions16bit[0x32] = () => SWAP(InstructionParam.D);
        Instructions16bit[0x33] = () => SWAP(InstructionParam.E);
        Instructions16bit[0x34] = () => SWAP(InstructionParam.H);
        Instructions16bit[0x35] = () => SWAP(InstructionParam.L);
        Instructions16bit[0x36] = () => SWAP(InstructionParam.HLMem);
        Instructions16bit[0x37] = () => SWAP(InstructionParam.A);
        Instructions16bit[0x38] = () => SRL(InstructionParam.B);
        Instructions16bit[0x39] = () => SRL(InstructionParam.C);
        Instructions16bit[0x3A] = () => SRL(InstructionParam.D);
        Instructions16bit[0x3B] = () => SRL(InstructionParam.E);
        Instructions16bit[0x3C] = () => SRL(InstructionParam.H);
        Instructions16bit[0x3D] = () => SRL(InstructionParam.L);
        Instructions16bit[0x3E] = () => SRL(InstructionParam.HLMem);
        Instructions16bit[0x3F] = () => SRL(InstructionParam.A);
        Instructions16bit[0x40] = () => BIT(InstructionParam.Bit0, InstructionParam.B);
        Instructions16bit[0x41] = () => BIT(InstructionParam.Bit0, InstructionParam.C);
        Instructions16bit[0x42] = () => BIT(InstructionParam.Bit0, InstructionParam.D);
        Instructions16bit[0x43] = () => BIT(InstructionParam.Bit0, InstructionParam.E);
        Instructions16bit[0x44] = () => BIT(InstructionParam.Bit0, InstructionParam.H);
        Instructions16bit[0x45] = () => BIT(InstructionParam.Bit0, InstructionParam.L);
        Instructions16bit[0x46] = () => BIT(InstructionParam.Bit0, InstructionParam.HLMem);
        Instructions16bit[0x47] = () => BIT(InstructionParam.Bit0, InstructionParam.A);
        Instructions16bit[0x48] = () => BIT(InstructionParam.Bit1, InstructionParam.B);
        Instructions16bit[0x49] = () => BIT(InstructionParam.Bit1, InstructionParam.C);
        Instructions16bit[0x4A] = () => BIT(InstructionParam.Bit1, InstructionParam.D);
        Instructions16bit[0x4B] = () => BIT(InstructionParam.Bit1, InstructionParam.E);
        Instructions16bit[0x4C] = () => BIT(InstructionParam.Bit1, InstructionParam.H);
        Instructions16bit[0x4D] = () => BIT(InstructionParam.Bit1, InstructionParam.L);
        Instructions16bit[0x4E] = () => BIT(InstructionParam.Bit1, InstructionParam.HLMem);
        Instructions16bit[0x4F] = () => BIT(InstructionParam.Bit1, InstructionParam.A);
        Instructions16bit[0x50] = () => BIT(InstructionParam.Bit2, InstructionParam.B);
        Instructions16bit[0x51] = () => BIT(InstructionParam.Bit2, InstructionParam.C);
        Instructions16bit[0x52] = () => BIT(InstructionParam.Bit2, InstructionParam.D);
        Instructions16bit[0x53] = () => BIT(InstructionParam.Bit2, InstructionParam.E);
        Instructions16bit[0x54] = () => BIT(InstructionParam.Bit2, InstructionParam.H);
        Instructions16bit[0x55] = () => BIT(InstructionParam.Bit2, InstructionParam.L);
        Instructions16bit[0x56] = () => BIT(InstructionParam.Bit2, InstructionParam.HLMem);
        Instructions16bit[0x57] = () => BIT(InstructionParam.Bit2, InstructionParam.A);
        Instructions16bit[0x58] = () => BIT(InstructionParam.Bit3, InstructionParam.B);
        Instructions16bit[0x59] = () => BIT(InstructionParam.Bit3, InstructionParam.C);
        Instructions16bit[0x5A] = () => BIT(InstructionParam.Bit3, InstructionParam.D);
        Instructions16bit[0x5B] = () => BIT(InstructionParam.Bit3, InstructionParam.E);
        Instructions16bit[0x5C] = () => BIT(InstructionParam.Bit3, InstructionParam.H);
        Instructions16bit[0x5D] = () => BIT(InstructionParam.Bit3, InstructionParam.L);
        Instructions16bit[0x5E] = () => BIT(InstructionParam.Bit3, InstructionParam.HLMem);
        Instructions16bit[0x5F] = () => BIT(InstructionParam.Bit3, InstructionParam.A);
        Instructions16bit[0x60] = () => BIT(InstructionParam.Bit4, InstructionParam.B);
        Instructions16bit[0x61] = () => BIT(InstructionParam.Bit4, InstructionParam.C);
        Instructions16bit[0x62] = () => BIT(InstructionParam.Bit4, InstructionParam.D);
        Instructions16bit[0x63] = () => BIT(InstructionParam.Bit4, InstructionParam.E);
        Instructions16bit[0x64] = () => BIT(InstructionParam.Bit4, InstructionParam.H);
        Instructions16bit[0x65] = () => BIT(InstructionParam.Bit4, InstructionParam.L);
        Instructions16bit[0x66] = () => BIT(InstructionParam.Bit4, InstructionParam.HLMem);
        Instructions16bit[0x67] = () => BIT(InstructionParam.Bit4, InstructionParam.A);
        Instructions16bit[0x68] = () => BIT(InstructionParam.Bit5, InstructionParam.B);
        Instructions16bit[0x69] = () => BIT(InstructionParam.Bit5, InstructionParam.C);
        Instructions16bit[0x6A] = () => BIT(InstructionParam.Bit5, InstructionParam.D);
        Instructions16bit[0x6B] = () => BIT(InstructionParam.Bit5, InstructionParam.E);
        Instructions16bit[0x6C] = () => BIT(InstructionParam.Bit5, InstructionParam.H);
        Instructions16bit[0x6D] = () => BIT(InstructionParam.Bit5, InstructionParam.L);
        Instructions16bit[0x6E] = () => BIT(InstructionParam.Bit5, InstructionParam.HLMem);
        Instructions16bit[0x6F] = () => BIT(InstructionParam.Bit5, InstructionParam.A);
        Instructions16bit[0x70] = () => BIT(InstructionParam.Bit6, InstructionParam.B);
        Instructions16bit[0x71] = () => BIT(InstructionParam.Bit6, InstructionParam.C);
        Instructions16bit[0x72] = () => BIT(InstructionParam.Bit6, InstructionParam.D);
        Instructions16bit[0x73] = () => BIT(InstructionParam.Bit6, InstructionParam.E);
        Instructions16bit[0x74] = () => BIT(InstructionParam.Bit6, InstructionParam.H);
        Instructions16bit[0x75] = () => BIT(InstructionParam.Bit6, InstructionParam.L);
        Instructions16bit[0x76] = () => BIT(InstructionParam.Bit6, InstructionParam.HLMem);
        Instructions16bit[0x77] = () => BIT(InstructionParam.Bit6, InstructionParam.A);
        Instructions16bit[0x78] = () => BIT(InstructionParam.Bit7, InstructionParam.B);
        Instructions16bit[0x79] = () => BIT(InstructionParam.Bit7, InstructionParam.C);
        Instructions16bit[0x7A] = () => BIT(InstructionParam.Bit7, InstructionParam.D);
        Instructions16bit[0x7B] = () => BIT(InstructionParam.Bit7, InstructionParam.E);
        Instructions16bit[0x7C] = () => BIT(InstructionParam.Bit7, InstructionParam.H);
        Instructions16bit[0x7D] = () => BIT(InstructionParam.Bit7, InstructionParam.L);
        Instructions16bit[0x7E] = () => BIT(InstructionParam.Bit7, InstructionParam.HLMem);
        Instructions16bit[0x7F] = () => BIT(InstructionParam.Bit7, InstructionParam.A);
        Instructions16bit[0x80] = () => RES(InstructionParam.Bit0, InstructionParam.B);
        Instructions16bit[0x81] = () => RES(InstructionParam.Bit0, InstructionParam.C);
        Instructions16bit[0x82] = () => RES(InstructionParam.Bit0, InstructionParam.D);
        Instructions16bit[0x83] = () => RES(InstructionParam.Bit0, InstructionParam.E);
        Instructions16bit[0x84] = () => RES(InstructionParam.Bit0, InstructionParam.H);
        Instructions16bit[0x85] = () => RES(InstructionParam.Bit0, InstructionParam.L);
        Instructions16bit[0x86] = () => RES(InstructionParam.Bit0, InstructionParam.HLMem);
        Instructions16bit[0x87] = () => RES(InstructionParam.Bit0, InstructionParam.A);
        Instructions16bit[0x88] = () => RES(InstructionParam.Bit1, InstructionParam.B);
        Instructions16bit[0x89] = () => RES(InstructionParam.Bit1, InstructionParam.C);
        Instructions16bit[0x8A] = () => RES(InstructionParam.Bit1, InstructionParam.D);
        Instructions16bit[0x8B] = () => RES(InstructionParam.Bit1, InstructionParam.E);
        Instructions16bit[0x8C] = () => RES(InstructionParam.Bit1, InstructionParam.H);
        Instructions16bit[0x8D] = () => RES(InstructionParam.Bit1, InstructionParam.L);
        Instructions16bit[0x8E] = () => RES(InstructionParam.Bit1, InstructionParam.HLMem);
        Instructions16bit[0x8F] = () => RES(InstructionParam.Bit1, InstructionParam.A);
        Instructions16bit[0x90] = () => RES(InstructionParam.Bit2, InstructionParam.B);
        Instructions16bit[0x91] = () => RES(InstructionParam.Bit2, InstructionParam.C);
        Instructions16bit[0x92] = () => RES(InstructionParam.Bit2, InstructionParam.D);
        Instructions16bit[0x93] = () => RES(InstructionParam.Bit2, InstructionParam.E);
        Instructions16bit[0x94] = () => RES(InstructionParam.Bit2, InstructionParam.H);
        Instructions16bit[0x95] = () => RES(InstructionParam.Bit2, InstructionParam.L);
        Instructions16bit[0x96] = () => RES(InstructionParam.Bit2, InstructionParam.HLMem);
        Instructions16bit[0x97] = () => RES(InstructionParam.Bit2, InstructionParam.A);
        Instructions16bit[0x98] = () => RES(InstructionParam.Bit3, InstructionParam.B);
        Instructions16bit[0x99] = () => RES(InstructionParam.Bit3, InstructionParam.C);
        Instructions16bit[0x9A] = () => RES(InstructionParam.Bit3, InstructionParam.D);
        Instructions16bit[0x9B] = () => RES(InstructionParam.Bit3, InstructionParam.E);
        Instructions16bit[0x9C] = () => RES(InstructionParam.Bit3, InstructionParam.H);
        Instructions16bit[0x9D] = () => RES(InstructionParam.Bit3, InstructionParam.L);
        Instructions16bit[0x9E] = () => RES(InstructionParam.Bit3, InstructionParam.HLMem);
        Instructions16bit[0x9F] = () => RES(InstructionParam.Bit3, InstructionParam.A);
        Instructions16bit[0xA0] = () => RES(InstructionParam.Bit4, InstructionParam.B);
        Instructions16bit[0xA1] = () => RES(InstructionParam.Bit4, InstructionParam.C);
        Instructions16bit[0xA2] = () => RES(InstructionParam.Bit4, InstructionParam.D);
        Instructions16bit[0xA3] = () => RES(InstructionParam.Bit4, InstructionParam.E);
        Instructions16bit[0xA4] = () => RES(InstructionParam.Bit4, InstructionParam.H);
        Instructions16bit[0xA5] = () => RES(InstructionParam.Bit4, InstructionParam.L);
        Instructions16bit[0xA6] = () => RES(InstructionParam.Bit4, InstructionParam.HLMem);
        Instructions16bit[0xA7] = () => RES(InstructionParam.Bit4, InstructionParam.A);
        Instructions16bit[0xA8] = () => RES(InstructionParam.Bit5, InstructionParam.B);
        Instructions16bit[0xA9] = () => RES(InstructionParam.Bit5, InstructionParam.C);
        Instructions16bit[0xAA] = () => RES(InstructionParam.Bit5, InstructionParam.D);
        Instructions16bit[0xAB] = () => RES(InstructionParam.Bit5, InstructionParam.E);
        Instructions16bit[0xAC] = () => RES(InstructionParam.Bit5, InstructionParam.H);
        Instructions16bit[0xAD] = () => RES(InstructionParam.Bit5, InstructionParam.L);
        Instructions16bit[0xAE] = () => RES(InstructionParam.Bit5, InstructionParam.HLMem);
        Instructions16bit[0xAF] = () => RES(InstructionParam.Bit5, InstructionParam.A);
        Instructions16bit[0xB0] = () => RES(InstructionParam.Bit6, InstructionParam.B);
        Instructions16bit[0xB1] = () => RES(InstructionParam.Bit6, InstructionParam.C);
        Instructions16bit[0xB2] = () => RES(InstructionParam.Bit6, InstructionParam.D);
        Instructions16bit[0xB3] = () => RES(InstructionParam.Bit6, InstructionParam.E);
        Instructions16bit[0xB4] = () => RES(InstructionParam.Bit6, InstructionParam.H);
        Instructions16bit[0xB5] = () => RES(InstructionParam.Bit6, InstructionParam.L);
        Instructions16bit[0xB6] = () => RES(InstructionParam.Bit6, InstructionParam.HLMem);
        Instructions16bit[0xB7] = () => RES(InstructionParam.Bit6, InstructionParam.A);
        Instructions16bit[0xB8] = () => RES(InstructionParam.Bit7, InstructionParam.B);
        Instructions16bit[0xB9] = () => RES(InstructionParam.Bit7, InstructionParam.C);
        Instructions16bit[0xBA] = () => RES(InstructionParam.Bit7, InstructionParam.D);
        Instructions16bit[0xBB] = () => RES(InstructionParam.Bit7, InstructionParam.E);
        Instructions16bit[0xBC] = () => RES(InstructionParam.Bit7, InstructionParam.H);
        Instructions16bit[0xBD] = () => RES(InstructionParam.Bit7, InstructionParam.L);
        Instructions16bit[0xBE] = () => RES(InstructionParam.Bit7, InstructionParam.HLMem);
        Instructions16bit[0xBF] = () => RES(InstructionParam.Bit7, InstructionParam.A);
        Instructions16bit[0xC0] = () => SET(InstructionParam.Bit0, InstructionParam.B);
        Instructions16bit[0xC1] = () => SET(InstructionParam.Bit0, InstructionParam.C);
        Instructions16bit[0xC2] = () => SET(InstructionParam.Bit0, InstructionParam.D);
        Instructions16bit[0xC3] = () => SET(InstructionParam.Bit0, InstructionParam.E);
        Instructions16bit[0xC4] = () => SET(InstructionParam.Bit0, InstructionParam.H);
        Instructions16bit[0xC5] = () => SET(InstructionParam.Bit0, InstructionParam.L);
        Instructions16bit[0xC6] = () => SET(InstructionParam.Bit0, InstructionParam.HLMem);
        Instructions16bit[0xC7] = () => SET(InstructionParam.Bit0, InstructionParam.A);
        Instructions16bit[0xC8] = () => SET(InstructionParam.Bit1, InstructionParam.B);
        Instructions16bit[0xC9] = () => SET(InstructionParam.Bit1, InstructionParam.C);
        Instructions16bit[0xCA] = () => SET(InstructionParam.Bit1, InstructionParam.D);
        Instructions16bit[0xCB] = () => SET(InstructionParam.Bit1, InstructionParam.E);
        Instructions16bit[0xCC] = () => SET(InstructionParam.Bit1, InstructionParam.H);
        Instructions16bit[0xCD] = () => SET(InstructionParam.Bit1, InstructionParam.L);
        Instructions16bit[0xCE] = () => SET(InstructionParam.Bit1, InstructionParam.HLMem);
        Instructions16bit[0xCF] = () => SET(InstructionParam.Bit1, InstructionParam.A);
        Instructions16bit[0xD0] = () => SET(InstructionParam.Bit2, InstructionParam.B);
        Instructions16bit[0xD1] = () => SET(InstructionParam.Bit2, InstructionParam.C);
        Instructions16bit[0xD2] = () => SET(InstructionParam.Bit2, InstructionParam.D);
        Instructions16bit[0xD3] = () => SET(InstructionParam.Bit2, InstructionParam.E);
        Instructions16bit[0xD4] = () => SET(InstructionParam.Bit2, InstructionParam.H);
        Instructions16bit[0xD5] = () => SET(InstructionParam.Bit2, InstructionParam.L);
        Instructions16bit[0xD6] = () => SET(InstructionParam.Bit2, InstructionParam.HLMem);
        Instructions16bit[0xD7] = () => SET(InstructionParam.Bit2, InstructionParam.A);
        Instructions16bit[0xD8] = () => SET(InstructionParam.Bit3, InstructionParam.B);
        Instructions16bit[0xD9] = () => SET(InstructionParam.Bit3, InstructionParam.C);
        Instructions16bit[0xDA] = () => SET(InstructionParam.Bit3, InstructionParam.D);
        Instructions16bit[0xDB] = () => SET(InstructionParam.Bit3, InstructionParam.E);
        Instructions16bit[0xDC] = () => SET(InstructionParam.Bit3, InstructionParam.H);
        Instructions16bit[0xDD] = () => SET(InstructionParam.Bit3, InstructionParam.L);
        Instructions16bit[0xDE] = () => SET(InstructionParam.Bit3, InstructionParam.HLMem);
        Instructions16bit[0xDF] = () => SET(InstructionParam.Bit3, InstructionParam.A);
        Instructions16bit[0xE0] = () => SET(InstructionParam.Bit4, InstructionParam.B);
        Instructions16bit[0xE1] = () => SET(InstructionParam.Bit4, InstructionParam.C);
        Instructions16bit[0xE2] = () => SET(InstructionParam.Bit4, InstructionParam.D);
        Instructions16bit[0xE3] = () => SET(InstructionParam.Bit4, InstructionParam.E);
        Instructions16bit[0xE4] = () => SET(InstructionParam.Bit4, InstructionParam.H);
        Instructions16bit[0xE5] = () => SET(InstructionParam.Bit4, InstructionParam.L);
        Instructions16bit[0xE6] = () => SET(InstructionParam.Bit4, InstructionParam.HLMem);
        Instructions16bit[0xE7] = () => SET(InstructionParam.Bit4, InstructionParam.A);
        Instructions16bit[0xE8] = () => SET(InstructionParam.Bit5, InstructionParam.B);
        Instructions16bit[0xE9] = () => SET(InstructionParam.Bit5, InstructionParam.C);
        Instructions16bit[0xEA] = () => SET(InstructionParam.Bit5, InstructionParam.D);
        Instructions16bit[0xEB] = () => SET(InstructionParam.Bit5, InstructionParam.E);
        Instructions16bit[0xEC] = () => SET(InstructionParam.Bit5, InstructionParam.H);
        Instructions16bit[0xED] = () => SET(InstructionParam.Bit5, InstructionParam.L);
        Instructions16bit[0xEE] = () => SET(InstructionParam.Bit5, InstructionParam.HLMem);
        Instructions16bit[0xEF] = () => SET(InstructionParam.Bit5, InstructionParam.A);
        Instructions16bit[0xF0] = () => SET(InstructionParam.Bit6, InstructionParam.B);
        Instructions16bit[0xF1] = () => SET(InstructionParam.Bit6, InstructionParam.C);
        Instructions16bit[0xF2] = () => SET(InstructionParam.Bit6, InstructionParam.D);
        Instructions16bit[0xF3] = () => SET(InstructionParam.Bit6, InstructionParam.E);
        Instructions16bit[0xF4] = () => SET(InstructionParam.Bit6, InstructionParam.H);
        Instructions16bit[0xF5] = () => SET(InstructionParam.Bit6, InstructionParam.L);
        Instructions16bit[0xF6] = () => SET(InstructionParam.Bit6, InstructionParam.HLMem);
        Instructions16bit[0xF7] = () => SET(InstructionParam.Bit6, InstructionParam.A);
        Instructions16bit[0xF8] = () => SET(InstructionParam.Bit7, InstructionParam.B);
        Instructions16bit[0xF9] = () => SET(InstructionParam.Bit7, InstructionParam.C);
        Instructions16bit[0xFA] = () => SET(InstructionParam.Bit7, InstructionParam.D);
        Instructions16bit[0xFB] = () => SET(InstructionParam.Bit7, InstructionParam.E);
        Instructions16bit[0xFC] = () => SET(InstructionParam.Bit7, InstructionParam.H);
        Instructions16bit[0xFD] = () => SET(InstructionParam.Bit7, InstructionParam.L);
        Instructions16bit[0xFE] = () => SET(InstructionParam.Bit7, InstructionParam.HLMem);
        Instructions16bit[0xFF] = () => SET(InstructionParam.Bit7, InstructionParam.A);
    }
}